{"version":3,"sources":["components/Person.js","components/Persons.js","components/PersonForm.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Person","person","delPerson","name","number","onClick","Persons","props","personsToShow","map","nimi","i","key","id","PersonForm","onSubmit","addPerson","value","newName","onChange","handlePersonChange","newNumber","handleNumberChange","type","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","notification","className","message","App","useState","persons","setPersons","setNewName","setNewNumber","newSearch","setNewSearch","setNotification","useEffect","personService","initialPersons","notifyWith","setTimeout","filter","toLowerCase","includes","event","target","console","log","preventDefault","personObject","henkilo","window","confirm","idNumero","indexOf","catch","error","returnedPerson","concat","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52211b3e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ({person, delPerson}) => {\r\n    return (\r\n      <p>{person.name} {person.number} <button onClick={delPerson}>Poista</button></p>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Persons = (props) => {\r\n\r\n    return (\r\n        props.personsToShow.map((nimi, i) => <Person key ={i} person={nimi} delPerson = {() => props.delPerson(nimi.id)}/>)\r\n    )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n\r\n  return (\r\n      <form onSubmit = {props.addPerson}>          \r\n      <div>\r\n        name: \r\n        <input \r\n          value={props.newName}\r\n          onChange={props.handlePersonChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        number:\r\n        <input \r\n          value={props.newNumber}\r\n          onChange={props.handleNumberChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n//const baseUrl = 'http://localhost:3001/api/persons'\r\n//const baseUrl = 'https://calm-savannah-45350.herokuapp.com/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  const delPerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  export default { getAll, create, update, delPerson}","import React from 'react'\r\n\r\n//Komponentti virheilmoituksia varten\r\n//Tyhjennetåään ilmoitus, kun null, muutoin annetaan joko success tai error -ilmoitus\r\nconst Notification = ({ notification }) => {\r\n  if (notification === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={notification.type}>\r\n      {notification.message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons.js'\nimport PersonForm from './components/PersonForm.js'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber ] = useState('')\n  const [newSearch, setNewSearch ] = useState('')\n  const [notification, setNotification ] = useState(null)\n\n  //Haetaan puhelinluettelo json-serveriltä portista 3001 (db.json sisältää tietokannan) käyttämällä personService-moduulia\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  //Metodi ilmoituksille, kestää 2 sekuntia\n  const notifyWith = (message, type='success') => {\n    setNotification({ message, type })\n    setTimeout(() => {\n      setNotification(null)\n    }, 3000)\n  }\n\n  //Henkilön lisääminen puhelinluetteloon\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    //Tarkistetaan, onko henkilö jo listassa \n    if(persons.map(function(henkilo){return henkilo.name}).includes(newName)){\n\n      //Jos henkilö löytyy jo ja käyttäjä haluaa korvata vanhan numeron\n      if(window.confirm('Henkilö on jo puhelinluettelosta. Haluatko korvata vanhan puhelinnumeron?')){\n\n        //Haetaan dublikaatin id-numero, jotta tiedetään minne päivitys tehdään\n        const idNumero = persons[persons.map(function(henkilo){return henkilo.name}).indexOf(newName)].id\n        personService\n        .update(idNumero, personObject)\n        .then(response => {\n          setPersons(persons.map(person => person.id !== idNumero ? person : response))\n          notifyWith(`Henkilön '${personObject.name}' puhelinnumero muutettu`)\n          console.log(`Henkilön '${personObject.name}' puhelinnumero muutettu`)\n        })\n        .catch(error => {\n          notifyWith(`${error.response.data.error} `, 'error')\n          console.log('Virhe puhelinnnumeron muuttamisessa')\n        })                    \n      }    \n    }\n    else{\n      //Uuden henkilön lisääminen: Synkronoidaan palvelimelle\n      personService\n      .create(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        notifyWith(`Henkilö  '${personObject.name}' lisätty puhelinluetteloon`)\n        console.log(`Henkilö '${personObject.name}' lisätty puhelinluetteloon`)\n      })\n      .catch(error => {\n        console.log('Virhe puhelinluetteloon lisäämisessä: ', error.response.data.error)\n        notifyWith(error.response.data.error, 'error')\n      })      \n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  //Metodi henkilön poistamiseksi\n  const delPerson = id => {  \n    if(window.confirm('Haluatko varmasti poistaa tämän henkilön puhelinluettelosta?')){\n        personService\n        .delPerson(id)\n        .then(\n            personService\n            .getAll()\n            .then(initialPersons => {\n            setPersons(persons.filter(p => p.id !== id))\n            notifyWith(`Henkilö poistettu puhelinluettelosta`)\n        })\n        .catch(error => {\n          notifyWith(`Henkilö on jo poistettu luettelosta`, 'error')\n        })\n      )          \n    }\n  }\n\n  //Asetetaan uusi nimi newName muuttujalle\n  const handlePersonChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  //Asetetaan uusi numero newNumber muuttujalle\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  \n  //Asetetaan uusi numero newNumber muuttujalle\n  const handleSearch = (event) => {    \n    setNewSearch(event.target.value)\n    console.log(\"Haku: \",newSearch)\n  }\n  \n  //Filtteröidään näytettävät nimet haun perusteella\n  //<Notification message = {message} notifType = {notifType}/>\n  const personsToShow = persons.filter(person => person.name.toLowerCase().includes(newSearch.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />      \n      <form>\n        Filter shown with: \n        <input\n          value={newSearch}\n          onChange={handleSearch}\n        />\n      </form>\n      <h2>Add a new</h2>\n      <PersonForm \n        addPerson={addPerson} \n        newName={newName} \n        handlePersonChange={handlePersonChange} \n        newNumber={newNumber} \n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons personsToShow = {personsToShow} delPerson = {delPerson}/>\n    </div>\n  )\n}\n\nexport default  App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}